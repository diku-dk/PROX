#ifndef HYPER_CL_QUATERNION_TYPE_CLH
#define HYPER_CL_QUATERNION_TYPE_CLH

#include "hyper_cl_real_type.clh"
#include "hyper_cl_vector3_type.clh"

typedef float4 quaternion_type;

__inline vector3_type q_imag(quaternion_type q) {
  return (vector3_type) (q.x, q.y, q.z);
}

__inline real_type q_real(quaternion_type q) {
  return (real_type) q.w;
}

__inline quaternion_type q_conj(quaternion_type q) {
  return (quaternion_type) (-q_imag(q), q_real(q));
}

__inline quaternion_type qv_prod(quaternion_type q, vector3_type v) {
  return (quaternion_type) (cross(q_imag(q), v) + v * q_real(q), -dot(q_imag(q), v));
}

__inline quaternion_type qq_prod(quaternion_type lhs, quaternion_type rhs) {
  return (quaternion_type) (  q_real(lhs) * q_imag(rhs) + q_imag(lhs) * q_real(rhs) + cross(q_imag(lhs), q_imag(rhs))
                            , q_real(lhs) * q_real(rhs) - dot(q_imag(lhs), q_imag(rhs))
                            );
}

__inline vector3_type q_rotate(quaternion_type q, vector3_type v) {
  return q_imag(qq_prod(qv_prod(q, v), q_conj(q)));
}

#endif // HYPER_CL_QUATERNION_TYPE_CLH